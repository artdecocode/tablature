{
"version":3,
"file":"compile/tablature.js",
"lineCount":62,
"mappings":"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",
"sources":["src/index.js","src/depack.js"],
"sourcesContent":["const heading = (h) => {\n  const value = `\\x1b[1m${h}\\x1b[0m`\n  return { value, length: h.length }\n}\n\nconst getLength = (value) => {\n  return `${value}`.replace(/\\033\\[.*?m/g, '').length\n}\n\nconst makeBinaryHash = (arr) => {\n  const res = arr.reduce((acc, current) => {\n    return {\n      ...acc,\n      [current]: true,\n    }\n  }, {})\n  return res\n}\n\n/**\n * Display values in a table.\n * @param {!_tablature.Config} conf Options for the program.\n */\nexport default function tablature(conf) {\n  const {\n    keys = [],\n    data = [],\n    headings = {},\n    replacements = {},\n    centerValues = [],\n    centerHeadings = [],\n  } = conf\n  const [i] = data\n  if (!i) return ''\n\n  const cv = makeBinaryHash(centerValues)\n  const hv = makeBinaryHash(centerHeadings)\n\n  const k = Object.keys(i).reduce((acc, key) => {\n    const h = headings[key]\n    return {\n      ...acc,\n      [key]: h ? h.length : key.length, // initialise with titles lengths\n    }\n  }, {})\n\n  const widths = data.reduce((dac, d) => {\n    const res = Object.keys(d).reduce((acc, key) => {\n      const maxLength = dac[key]\n      const val = d[key]\n      const r = getReplacement(replacements, key)\n      const { length } = r(val)\n      return {\n        ...acc,\n        [key]: Math.max(length, maxLength),\n      }\n    }, {})\n    return res\n  }, k)\n\n  const kk = keys.reduce((acc, key) => {\n    const h = headings[key]\n    return {\n      ...acc,\n      [key]: h || key,\n    }\n  }, {})\n  const hr = keys.reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: heading,\n    }\n  }, {})\n  const hl = getLine(keys, kk, widths, hr, hv)\n  const rl = data.map((row) => {\n    const line = getLine(keys, row, widths, replacements, cv)\n    return line\n  })\n  return [\n    hl,\n    ...rl,\n  ].join('\\n')\n}\n\nconst pad = (val, length, replacement, cen) => {\n  if (val === undefined) return ' '.repeat(length)\n  let v = val\n  let l\n  if (replacement) {\n    const { value, length: len } = replacement(val)\n    v = value\n    l = len\n  } else {\n    l = `${val}`.length\n  }\n  const p = length - l\n  if (cen) {\n    const left = Math.floor(p / 2)\n    const right = p - left\n    const s = ' '.repeat(left) + v + ' '.repeat(right)\n    return s\n  }\n  const s = ' '.repeat(p)\n  return `${v}${s}`\n}\n\nconst getReplacement = (replacements, key) => {\n  const r = replacements[key]\n  if (!r) return value => ({\n    value,\n    length: getLength(value),\n  })\n  return r\n}\n\nconst getLine = (keys, values, widths, replacements = {}, center = {}) => {\n  let currentWidth = 0\n  const k = keys.map(key => {\n    const w = widths[key]\n    if (!w) throw new Error(`Unknown field ${key}`)\n    const v = values[key]\n    const r = getReplacement(replacements, key)\n    const cen = center[key]\n    const [rh, ...rows] = `${v}`.split('\\n')\n    const h = pad(rh, w, r, cen)\n    let rs = ''\n    if (rows.length) {\n      rs = '\\n' + rows.map(row => {\n        const wb = ' '.repeat(currentWidth)\n        const rv = pad(row, w, r, cen)\n        return `${wb}${rv}`\n      }).join('\\n')\n    }\n    const res = `${h}${rs}`\n    currentWidth += w + 2\n    return res\n  })\n  const line = k.join('  ')\n  return line\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Config} _tablature.Config\n */","import '../types/externs'\nimport tablature from './'\n\nmodule.exports = tablature"],
"names":["heading","h","value","length","makeBinaryHash","arr","reduce","res","acc","current","pad","val","replacement","cen","undefined","repeat","v","len","l","p","left","s","Math","floor","right","getReplacement","replacements","key","r","replace","getLine","keys","values","widths","center","currentWidth","map","k","w","Error","rh","rows","split","rs","row","wb","rv","join","line","module","exports","tablature","conf","data","headings","centerValues","centerHeadings","i","cv","hv","Object","dac","d","maxLength","max","kk","hr","hl","rl"]
}
