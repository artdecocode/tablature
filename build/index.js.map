{"version":3,"sources":["../src/index.js"],"names":["heading","h","value","length","makeBinaryHash","arr","res","reduce","acc","current","tablature","conf","keys","data","headings","replacements","centerValues","centerHeadings","i","cv","hv","k","Object","key","widths","dac","d","maxLength","val","r","Math","max","kk","hr","hl","getLine","rl","map","row","line","join","pad","replacement","cen","undefined","repeat","v","l","len","p","left","floor","right","s","values","center","w","Error"],"mappings":"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","sourcesContent":["const heading = (h) => {\n  const value = `\\x1b[1m${h}\\x1b[0m`\n  return { value, length: h.length }\n}\n\nconst makeBinaryHash = (arr) => {\n  const res = arr.reduce((acc, current) => {\n    return {\n      ...acc,\n      [current]: true,\n    }\n  }, {})\n  return res\n}\n\n\n/**\n * Display values in a table.\n * @param {Config} conf\n * @param {string[]} config.keys Keys to print as columns.\n * @param {Object.<string, string>[]} config.data An array of data items to prints as rows.\n * @param {Object.<string, string>} [config.headings] Display names for each column.\n * @param {Object.<string, Replacement>} [config.replacements] A map of replacement functions which will run against data items.\n * @param {string[]} [config.centerValues] Centre values of this column (use original keys, not headings)\n * @param {string[]} [config.centerHeadings] Center headings of this column (use original keys, not headings)\n * @returns {string} A string which represents a table.\n */\nexport default function tablature(conf) {\n  const {\n    keys = [],\n    data = [],\n    headings = {},\n    replacements = {},\n    centerValues = [],\n    centerHeadings = [],\n  } = conf\n  const [i] = data\n  if (!i) return ''\n\n  const cv = makeBinaryHash(centerValues)\n  const hv = makeBinaryHash(centerHeadings)\n\n  const k = Object.keys(i).reduce((acc, key) => {\n    const h = headings[key]\n    return {\n      ...acc,\n      [key]: h ? h.length : key.length, // initialise with titles lengths\n    }\n  }, {})\n\n  const widths = data.reduce((dac, d) => {\n    const res = Object.keys(d).reduce((acc, key) => {\n      const maxLength = dac[key]\n      const val = d[key]\n      const r = replacements[key]\n      const { length } = r ? r(val) : `${val}`\n      return {\n        ...acc,\n        [key]: Math.max(length, maxLength),\n      }\n    }, {})\n    return res\n  }, k)\n\n  const kk = keys.reduce((acc, key) => {\n    const h = headings[key]\n    return {\n      ...acc,\n      [key]: h || key,\n    }\n  }, {})\n  const hr = keys.reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: heading,\n    }\n  }, {})\n  const hl = getLine(keys, kk, widths, hr, hv)\n  const rl = data.map((row) => {\n    const line = getLine(keys, row, widths, replacements, cv)\n    return line\n  })\n  return [\n    hl,\n    ...rl,\n  ].join('\\n')\n}\n\nconst pad = (val, length, replacement, cen) => {\n  if (val === undefined) return ' '.repeat(length)\n  let v = val\n  let l\n  if (replacement) {\n    const { value, length: len } = replacement(val)\n    v = value\n    l = len\n  } else {\n    l = `${val}`.length\n  }\n  const p = length - l\n  if (cen) {\n    const left = Math.floor(p / 2)\n    const right = p - left\n    const s = ' '.repeat(left) + v + ' '.repeat(right)\n    return s\n  }\n  const s = ' '.repeat(p)\n  return `${v}${s}`\n}\n\nconst getLine = (keys, values, widths, replacements = {}, center = {}) => {\n  const k = keys.map(key => {\n    const w = widths[key]\n    if (!w) throw new Error(`Unknown field ${key}`)\n    const v = values[key]\n    const r = replacements[key]\n    const cen = center[key]\n    const p = pad(v, w, r, cen)\n    return p\n  })\n  const line = k.join('  ')\n  return line\n}\n\n\n/**\n * @typedef {(value: string) => {value: string, length: number}} Replacement A replacement function.\n *\n *\n * @typedef {Object} Config\n * @property {string[]} keys Keys to print as columns.\n * @property {Object.<string, string>[]} data An array of data items to prints as rows.\n * @property {Object.<string, string>} [headings = {}] Replace data keys with headings.\n * @property {Object.<string, Replacement>} [replacements] Replace data values with this values.\n * @property {string[]} [centerValues] Center values of this column (use original keys, not headings)\n * @property {string[]} [centerHeadings Center headings of this column (use original keys, not headings)\n */\n"],"file":"index.js"}